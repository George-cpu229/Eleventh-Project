{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLendthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","dialogsPage","dialogElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,qJCG/MC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,4JAG3C,WACI,OAAIC,KAAKC,MAAMN,OAER,cAACG,EAAD,eAAeE,KAAKC,QAFG,cAAC,IAAD,CAAUC,GAAG,eAJJ,GAEXC,IAAML,WAW1C,OAFqCM,YAAQX,EAARW,CAAoCL,K,4HCL1DM,EAVI,SAACJ,GAEhB,IAAIK,EAAO,YAAcL,EAAMM,GAEnC,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACP,cAAC,IAAD,CAAST,GAAII,EAAb,SAAoBL,EAAMW,UCAXC,EANC,SAACZ,GACjB,OACA,qBAAKO,UAAWC,IAAEC,OAAlB,SAA2BT,EAAMa,WCiC3BC,EAAcC,YAAiB,KAe/BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAbL,SAACjB,GACpB,OACA,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACQ,8BACH,cAACC,EAAA,EAAD,CAAQC,YAAY,qBAAqBC,UAAWC,IAAWb,KAAK,iBAAiBc,SAAU,CAACC,IAAUZ,OAEvG,8BACI,kDAQDa,EA7CC,SAAC3B,GACjB,IAAIP,EAAQO,EAAM4B,YAENC,EAAiBpC,EAAMqC,QAAQC,KAAK,SAAAC,GAAC,OAAM,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBL,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,OAC5E2B,EAAmBxC,EAAMyC,SAASH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAE7B,OAC/Db,EAAM2C,eAS/B,OACA,sBAAK7B,UAAWC,IAAEsB,QAAlB,UACG,qBAAKvB,UAAWC,IAAE6B,aAAlB,SACMR,IAET,qBAAKtB,UAAWC,IAAE0B,SAAlB,SACI,8BAAMD,MAGN,cAACjB,EAAD,CAAqBG,SAdT,SAACmB,GACjBtC,EAAMuC,YAAYD,EAAOF,uB,wBCOdI,sBACXrC,aAjBoB,SAACV,GAExB,MAAO,CACJmC,YAAanC,EAAMmC,gBAGI,SAACa,GAC3B,MAAO,CAEJF,YAAa,SAACH,GACVK,EAASC,YAAmBN,SAQhCxC,IAFW4C,CAGbb","file":"static/js/4.fab7ce99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__xzoT3\",\"dialogsItems\":\"Dialogs_dialogsItems__1ib8T\",\"active\":\"Dialogs_active__1MMz_\",\"dialog\":\"Dialogs_dialog__jkkMr\",\"messages\":\"Dialogs_messages__1e3HD\",\"message\":\"Dialogs_message__3Vhbc\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component{\r\n    render() {\r\n        if(!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n        return <Component {...this.props}/>\r\n    \r\n}\r\n}\r\n\r\nlet ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n  \r\nreturn ConnectedAuthRedirectComponent;\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id;\r\n\r\nreturn <div className={s.dialog + ' ' + s.active}>\r\n<NavLink to={path}>{props.name}</NavLink>\r\n</div> \r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\nreturn (\r\n<div className={s.dialog}>{props.message}</div>\r\n);\r\n} \r\n\r\nexport default Message;","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLendthCreator, required } from '../../Utils/Validation/validators';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\n\r\nconst Dialogs = (props) => {\r\nlet state = props.dialogsPage;\r\n\r\n        let dialogElements = state.dialogs.map( d => ( <DialogItem name={d.name} key={d.id} id={d.id}/>));\r\n        let messagesElements = state.messages.map( m=> (<Message message={m.message} key={m.id} />));\r\n        let newMessageBody = state.newMessageBody;\r\n\r\n\r\n\r\nlet addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n}\r\n\r\n\r\n    return (\r\n    <div className={s.dialogs}> \r\n       <div className={s.dialogsItems}>\r\n           { dialogElements }\r\n       </div> \r\n    <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n           \r\n        </div>\r\n        <AddMessageReduxForm onSubmit={addNewMessage} />\r\n    </div>\r\n    );\r\n}\r\n\r\nconst maxLength50 = maxLendthCreator(100);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n         <Field  placeholder='Enter your message' component={Textarea}  name=\"newMessageBody\" validate={[required, maxLength50]} />\r\n                </div>\r\n            <div>\r\n                <button>Send</button>\r\n                </div>\r\n         </form>\r\n         )\r\n         }\r\n\r\nconst AddMessageReduxForm = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { sendMessageCreator } from '../../Redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from \"react-redux\";\r\nimport { Redirect } from 'react-router';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n return {\r\n    dialogsPage: state.dialogsPage\r\n }\r\n}\r\nconst  mapDispatchToProps= (dispatch) => {\r\n return {\r\n   \r\n    sendMessage: (newMessageBody) => {\r\n        dispatch(sendMessageCreator(newMessageBody));\r\n    }\r\n }\r\n}\r\n\r\n\r\nexport default compose (\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n"],"sourceRoot":""}